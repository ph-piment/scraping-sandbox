// Code generated by counterfeiter. DO NOT EDIT.
package repositoryfakes

import (
	"context"
	"scraping-sandbox/internal/domain"
	"sync"
)

type FakeEdinetRepository struct {
	FetchBigHoldersStub        func(context.Context, string) ([]domain.EdinetDoc, error)
	fetchBigHoldersMutex       sync.RWMutex
	fetchBigHoldersArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	fetchBigHoldersReturns struct {
		result1 []domain.EdinetDoc
		result2 error
	}
	fetchBigHoldersReturnsOnCall map[int]struct {
		result1 []domain.EdinetDoc
		result2 error
	}
	LoadEdinetCodeEntriesStub        func() ([]domain.EdinetCodeEntry, error)
	loadEdinetCodeEntriesMutex       sync.RWMutex
	loadEdinetCodeEntriesArgsForCall []struct {
	}
	loadEdinetCodeEntriesReturns struct {
		result1 []domain.EdinetCodeEntry
		result2 error
	}
	loadEdinetCodeEntriesReturnsOnCall map[int]struct {
		result1 []domain.EdinetCodeEntry
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEdinetRepository) FetchBigHolders(arg1 context.Context, arg2 string) ([]domain.EdinetDoc, error) {
	fake.fetchBigHoldersMutex.Lock()
	ret, specificReturn := fake.fetchBigHoldersReturnsOnCall[len(fake.fetchBigHoldersArgsForCall)]
	fake.fetchBigHoldersArgsForCall = append(fake.fetchBigHoldersArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.FetchBigHoldersStub
	fakeReturns := fake.fetchBigHoldersReturns
	fake.recordInvocation("FetchBigHolders", []interface{}{arg1, arg2})
	fake.fetchBigHoldersMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEdinetRepository) FetchBigHoldersCallCount() int {
	fake.fetchBigHoldersMutex.RLock()
	defer fake.fetchBigHoldersMutex.RUnlock()
	return len(fake.fetchBigHoldersArgsForCall)
}

func (fake *FakeEdinetRepository) FetchBigHoldersCalls(stub func(context.Context, string) ([]domain.EdinetDoc, error)) {
	fake.fetchBigHoldersMutex.Lock()
	defer fake.fetchBigHoldersMutex.Unlock()
	fake.FetchBigHoldersStub = stub
}

func (fake *FakeEdinetRepository) FetchBigHoldersArgsForCall(i int) (context.Context, string) {
	fake.fetchBigHoldersMutex.RLock()
	defer fake.fetchBigHoldersMutex.RUnlock()
	argsForCall := fake.fetchBigHoldersArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeEdinetRepository) FetchBigHoldersReturns(result1 []domain.EdinetDoc, result2 error) {
	fake.fetchBigHoldersMutex.Lock()
	defer fake.fetchBigHoldersMutex.Unlock()
	fake.FetchBigHoldersStub = nil
	fake.fetchBigHoldersReturns = struct {
		result1 []domain.EdinetDoc
		result2 error
	}{result1, result2}
}

func (fake *FakeEdinetRepository) FetchBigHoldersReturnsOnCall(i int, result1 []domain.EdinetDoc, result2 error) {
	fake.fetchBigHoldersMutex.Lock()
	defer fake.fetchBigHoldersMutex.Unlock()
	fake.FetchBigHoldersStub = nil
	if fake.fetchBigHoldersReturnsOnCall == nil {
		fake.fetchBigHoldersReturnsOnCall = make(map[int]struct {
			result1 []domain.EdinetDoc
			result2 error
		})
	}
	fake.fetchBigHoldersReturnsOnCall[i] = struct {
		result1 []domain.EdinetDoc
		result2 error
	}{result1, result2}
}

func (fake *FakeEdinetRepository) LoadEdinetCodeEntries() ([]domain.EdinetCodeEntry, error) {
	fake.loadEdinetCodeEntriesMutex.Lock()
	ret, specificReturn := fake.loadEdinetCodeEntriesReturnsOnCall[len(fake.loadEdinetCodeEntriesArgsForCall)]
	fake.loadEdinetCodeEntriesArgsForCall = append(fake.loadEdinetCodeEntriesArgsForCall, struct {
	}{})
	stub := fake.LoadEdinetCodeEntriesStub
	fakeReturns := fake.loadEdinetCodeEntriesReturns
	fake.recordInvocation("LoadEdinetCodeEntries", []interface{}{})
	fake.loadEdinetCodeEntriesMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeEdinetRepository) LoadEdinetCodeEntriesCallCount() int {
	fake.loadEdinetCodeEntriesMutex.RLock()
	defer fake.loadEdinetCodeEntriesMutex.RUnlock()
	return len(fake.loadEdinetCodeEntriesArgsForCall)
}

func (fake *FakeEdinetRepository) LoadEdinetCodeEntriesCalls(stub func() ([]domain.EdinetCodeEntry, error)) {
	fake.loadEdinetCodeEntriesMutex.Lock()
	defer fake.loadEdinetCodeEntriesMutex.Unlock()
	fake.LoadEdinetCodeEntriesStub = stub
}

func (fake *FakeEdinetRepository) LoadEdinetCodeEntriesReturns(result1 []domain.EdinetCodeEntry, result2 error) {
	fake.loadEdinetCodeEntriesMutex.Lock()
	defer fake.loadEdinetCodeEntriesMutex.Unlock()
	fake.LoadEdinetCodeEntriesStub = nil
	fake.loadEdinetCodeEntriesReturns = struct {
		result1 []domain.EdinetCodeEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeEdinetRepository) LoadEdinetCodeEntriesReturnsOnCall(i int, result1 []domain.EdinetCodeEntry, result2 error) {
	fake.loadEdinetCodeEntriesMutex.Lock()
	defer fake.loadEdinetCodeEntriesMutex.Unlock()
	fake.LoadEdinetCodeEntriesStub = nil
	if fake.loadEdinetCodeEntriesReturnsOnCall == nil {
		fake.loadEdinetCodeEntriesReturnsOnCall = make(map[int]struct {
			result1 []domain.EdinetCodeEntry
			result2 error
		})
	}
	fake.loadEdinetCodeEntriesReturnsOnCall[i] = struct {
		result1 []domain.EdinetCodeEntry
		result2 error
	}{result1, result2}
}

func (fake *FakeEdinetRepository) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEdinetRepository) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ domain.EdinetRepository = new(FakeEdinetRepository)
